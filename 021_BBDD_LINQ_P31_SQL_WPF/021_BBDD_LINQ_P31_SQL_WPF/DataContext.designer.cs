#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace _021_BBDD_LINQ_P31_SQL_WPF
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GestionPedidos")]
	public partial class DataContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void Insertempresas(empresas instance);
    partial void Updateempresas(empresas instance);
    partial void Deleteempresas(empresas instance);
    partial void Insertempleados(empleados instance);
    partial void Updateempleados(empleados instance);
    partial void Deleteempleados(empleados instance);
    partial void Insertcargos(cargos instance);
    partial void Updatecargos(cargos instance);
    partial void Deletecargos(cargos instance);
    partial void InsertrolesEmpleados(rolesEmpleados instance);
    partial void UpdaterolesEmpleados(rolesEmpleados instance);
    partial void DeleterolesEmpleados(rolesEmpleados instance);
    #endregion
		
		public DataContextDataContext() : 
				base(global::_021_BBDD_LINQ_P31_SQL_WPF.Properties.Settings.Default.GestionPedidosConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<empresas> empresas
		{
			get
			{
				return this.GetTable<empresas>();
			}
		}
		
		public System.Data.Linq.Table<empleados> empleados
		{
			get
			{
				return this.GetTable<empleados>();
			}
		}
		
		public System.Data.Linq.Table<cargos> cargos
		{
			get
			{
				return this.GetTable<cargos>();
			}
		}
		
		public System.Data.Linq.Table<rolesEmpleados> rolesEmpleados
		{
			get
			{
				return this.GetTable<rolesEmpleados>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.empresas")]
	public partial class empresas : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _nombre;
		
		private EntitySet<empleados> _empleados;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnombreChanging(string value);
    partial void OnnombreChanged();
    #endregion
		
		public empresas()
		{
			this._empleados = new EntitySet<empleados>(new Action<empleados>(this.attach_empleados), new Action<empleados>(this.detach_empleados));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nombre", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string nombre
		{
			get
			{
				return this._nombre;
			}
			set
			{
				if ((this._nombre != value))
				{
					this.OnnombreChanging(value);
					this.SendPropertyChanging();
					this._nombre = value;
					this.SendPropertyChanged("nombre");
					this.OnnombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="empresas_empleados", Storage="_empleados", ThisKey="id", OtherKey="empresaId")]
		public EntitySet<empleados> empleados
		{
			get
			{
				return this._empleados;
			}
			set
			{
				this._empleados.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_empleados(empleados entity)
		{
			this.SendPropertyChanging();
			entity.empresas = this;
		}
		
		private void detach_empleados(empleados entity)
		{
			this.SendPropertyChanging();
			entity.empresas = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.empleados")]
	public partial class empleados : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _nombre;
		
		private string _apellido;
		
		private int _empresaId;
		
		private EntitySet<rolesEmpleados> _rolesEmpleados;
		
		private EntityRef<empresas> _empresas;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnombreChanging(string value);
    partial void OnnombreChanged();
    partial void OnapellidoChanging(string value);
    partial void OnapellidoChanged();
    partial void OnempresaIdChanging(int value);
    partial void OnempresaIdChanged();
    #endregion
		
		public empleados()
		{
			this._rolesEmpleados = new EntitySet<rolesEmpleados>(new Action<rolesEmpleados>(this.attach_rolesEmpleados), new Action<rolesEmpleados>(this.detach_rolesEmpleados));
			this._empresas = default(EntityRef<empresas>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nombre", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string nombre
		{
			get
			{
				return this._nombre;
			}
			set
			{
				if ((this._nombre != value))
				{
					this.OnnombreChanging(value);
					this.SendPropertyChanging();
					this._nombre = value;
					this.SendPropertyChanged("nombre");
					this.OnnombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_apellido", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string apellido
		{
			get
			{
				return this._apellido;
			}
			set
			{
				if ((this._apellido != value))
				{
					this.OnapellidoChanging(value);
					this.SendPropertyChanging();
					this._apellido = value;
					this.SendPropertyChanged("apellido");
					this.OnapellidoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_empresaId", DbType="Int NOT NULL")]
		public int empresaId
		{
			get
			{
				return this._empresaId;
			}
			set
			{
				if ((this._empresaId != value))
				{
					if (this._empresas.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnempresaIdChanging(value);
					this.SendPropertyChanging();
					this._empresaId = value;
					this.SendPropertyChanged("empresaId");
					this.OnempresaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="empleados_rolesEmpleados", Storage="_rolesEmpleados", ThisKey="id", OtherKey="empleadoId")]
		public EntitySet<rolesEmpleados> rolesEmpleados
		{
			get
			{
				return this._rolesEmpleados;
			}
			set
			{
				this._rolesEmpleados.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="empresas_empleados", Storage="_empresas", ThisKey="empresaId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public empresas empresas
		{
			get
			{
				return this._empresas.Entity;
			}
			set
			{
				empresas previousValue = this._empresas.Entity;
				if (((previousValue != value) 
							|| (this._empresas.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._empresas.Entity = null;
						previousValue.empleados.Remove(this);
					}
					this._empresas.Entity = value;
					if ((value != null))
					{
						value.empleados.Add(this);
						this._empresaId = value.id;
					}
					else
					{
						this._empresaId = default(int);
					}
					this.SendPropertyChanged("empresas");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_rolesEmpleados(rolesEmpleados entity)
		{
			this.SendPropertyChanging();
			entity.empleados = this;
		}
		
		private void detach_rolesEmpleados(rolesEmpleados entity)
		{
			this.SendPropertyChanging();
			entity.empleados = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cargos")]
	public partial class cargos : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<rolesEmpleados> _rolesEmpleados;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public cargos()
		{
			this._rolesEmpleados = new EntitySet<rolesEmpleados>(new Action<rolesEmpleados>(this.attach_rolesEmpleados), new Action<rolesEmpleados>(this.detach_rolesEmpleados));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cargos_rolesEmpleados", Storage="_rolesEmpleados", ThisKey="id", OtherKey="cargoId")]
		public EntitySet<rolesEmpleados> rolesEmpleados
		{
			get
			{
				return this._rolesEmpleados;
			}
			set
			{
				this._rolesEmpleados.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_rolesEmpleados(rolesEmpleados entity)
		{
			this.SendPropertyChanging();
			entity.cargos = this;
		}
		
		private void detach_rolesEmpleados(rolesEmpleados entity)
		{
			this.SendPropertyChanging();
			entity.cargos = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.rolesEmpleados")]
	public partial class rolesEmpleados : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _empleadoId;
		
		private int _cargoId;
		
		private EntityRef<cargos> _cargos;
		
		private EntityRef<empleados> _empleados;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnempleadoIdChanging(int value);
    partial void OnempleadoIdChanged();
    partial void OncargoIdChanging(int value);
    partial void OncargoIdChanged();
    #endregion
		
		public rolesEmpleados()
		{
			this._cargos = default(EntityRef<cargos>);
			this._empleados = default(EntityRef<empleados>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_empleadoId", DbType="Int NOT NULL")]
		public int empleadoId
		{
			get
			{
				return this._empleadoId;
			}
			set
			{
				if ((this._empleadoId != value))
				{
					if (this._empleados.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnempleadoIdChanging(value);
					this.SendPropertyChanging();
					this._empleadoId = value;
					this.SendPropertyChanged("empleadoId");
					this.OnempleadoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cargoId", DbType="Int NOT NULL")]
		public int cargoId
		{
			get
			{
				return this._cargoId;
			}
			set
			{
				if ((this._cargoId != value))
				{
					if (this._cargos.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncargoIdChanging(value);
					this.SendPropertyChanging();
					this._cargoId = value;
					this.SendPropertyChanged("cargoId");
					this.OncargoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cargos_rolesEmpleados", Storage="_cargos", ThisKey="cargoId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public cargos cargos
		{
			get
			{
				return this._cargos.Entity;
			}
			set
			{
				cargos previousValue = this._cargos.Entity;
				if (((previousValue != value) 
							|| (this._cargos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._cargos.Entity = null;
						previousValue.rolesEmpleados.Remove(this);
					}
					this._cargos.Entity = value;
					if ((value != null))
					{
						value.rolesEmpleados.Add(this);
						this._cargoId = value.id;
					}
					else
					{
						this._cargoId = default(int);
					}
					this.SendPropertyChanged("cargos");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="empleados_rolesEmpleados", Storage="_empleados", ThisKey="empleadoId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public empleados empleados
		{
			get
			{
				return this._empleados.Entity;
			}
			set
			{
				empleados previousValue = this._empleados.Entity;
				if (((previousValue != value) 
							|| (this._empleados.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._empleados.Entity = null;
						previousValue.rolesEmpleados.Remove(this);
					}
					this._empleados.Entity = value;
					if ((value != null))
					{
						value.rolesEmpleados.Add(this);
						this._empleadoId = value.id;
					}
					else
					{
						this._empleadoId = default(int);
					}
					this.SendPropertyChanged("empleados");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
